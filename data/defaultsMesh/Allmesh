#!/bin/bash

runCommand()
{
    if [ "$1" == "mpiexec" ]; then sol="$4"; else sol="$1"; fi
    sol=$(basename -- "$sol")
    sol="${sol%.*}"
    if [ -f log."$sol" ]; then rm log."$sol"; fi
    "$@" 1> >(tee -a log."$sol") 2> >(tee -a log."$sol" >&2)
    err=$?
    if [ ! $err -eq 0 ]; then exit $err; fi
}

%{%(MeshUtility%)
%:gmsh
GMSH_EXE='%(GmshSettings/Executable%)'
runCommand "$GMSH_EXE" - "gmsh/%(Name%)_Geometry.geo"

%}
# Unset and source bashrc
%{%(FoamRuntime%)
%:Posix
FOAMDIR="%(TranslatedFoamPath%)"
%}
if [ ! -z "$FOAMDIR" ]
then
    source "$FOAMDIR/etc/config.sh/unset" 2> /dev/null
    source "$FOAMDIR/etc/bashrc"
fi

%{%(MeshUtility%)
%:cfMesh
# Extract feature edges
runCommand surfaceFeatureEdges -angle 60 "constant/triSurface/%(Name%)_Geometry.stl" "%(Name%)_Geometry.fms"

%{%(ParallelMesh%)
%:True
%{%(NumberOfThreads%)
%:0
export OMP_NUM_THREADS=1
%:default
export OMP_NUM_THREADS=%(NumberOfThreads%)
%}
runCommand preparePar
runCommand mpiexec -np %(NumberOfProcesses%) cartesianMesh -parallel
runCommand reconstructParMesh -constant -fullMatch
%:False
%{%(NumberOfThreads%)
%:0
%:default
export OMP_NUM_THREADS=%(NumberOfThreads%)
%}
runCommand cartesianMesh
%}
%:snappyHexMesh
runCommand blockMesh

# Extract feature edges
which surfaceFeatures > /dev/null 2>&1
if [ $? == 0 ]
then
    runCommand surfaceFeatures
else
    runCommand surfaceFeatureExtract
fi

%{%(ParallelMesh%)
%:True
runCommand decomposePar
runCommand mpiexec -np %(NumberOfProcesses%) snappyHexMesh -overwrite -parallel
runCommand reconstructParMesh -constant
%:False
runCommand snappyHexMesh -overwrite
%}
%:gmsh
runCommand gmshToFoam "gmsh/%(Name%)_Geometry.msh"

%{%(ConvertToDualMesh%)
%:True
# Convert to polyhedra
runCommand polyDualMesh 10 -concaveMultiCells -overwrite

%}
if [ -z $FOAM_API ] && ( [ $WM_PROJECT_VERSION == "dev" ] || [ $WM_PROJECT_VERSION -ge 9 ] )
then
    runCommand transformPoints "scale=(0.001 0.001 0.001)"
else
    runCommand transformPoints -scale "(0.001 0.001 0.001)"
fi
%}

%{%(ExtrusionSettings/ExtrusionsPresent%)
%:True
# Create extrusions
runCommand createPatch -overwrite
%{%(ExtrusionSettings/Extrusions%)
cp system/extrudeMeshDict.%(0%) system/extrudeMeshDict
runCommand extrudeMesh
mv log.extrudeMesh log.extrudeMesh.%(0%)
rm system/extrudeMeshDict
%}
%{%(ExtrusionSettings/Extrude2DPlanar%)
%:True
runCommand flattenMesh
%}

%}
# Extract surface mesh and convert to mm for visualisation in FreeCAD
if [ ! -z $FOAM_API ] && [ $FOAM_API -ge 1906 ] || [ $WM_PROJECT_VERSION == "v1906" ]
then
    runCommand surfaceMeshExtract mesh_outside.stl
else
    runCommand surfaceMeshTriangulate mesh_outside.stl
fi
if [ -z $FOAM_API ] && ( [ $WM_PROJECT_VERSION == "dev" ] || [ $WM_PROJECT_VERSION -ge 9 ] )
then
    runCommand surfaceTransformPoints "scale=(1000 1000 1000)" mesh_outside.stl mesh_outside.stl
else
    runCommand surfaceTransformPoints -scale "(1000 1000 1000)" mesh_outside.stl mesh_outside.stl
fi
